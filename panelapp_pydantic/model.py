# generated by datamodel-codegen:
#   filename:  api.json

from __future__ import annotations

from collections.abc import Sequence

from pydantic import BaseModel, Field


class Contact(BaseModel):
    email: str


class Info(BaseModel):
    title: str
    description: str
    termsOfService: str
    contact: Contact
    version: str


class ApiKey(BaseModel):
    type: str
    in_: str = Field(..., alias="in")
    name: str
    description: str


class SecurityDefinitions(BaseModel):
    api_key: ApiKey


class SecurityItem(BaseModel):
    api_key: Sequence


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Count(BaseModel):
    type: str


class Next(BaseModel):
    type: str
    format: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Previous(BaseModel):
    type: str
    format: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Items(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Results(BaseModel):
    type: str
    items: Items


class Properties(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results


class Schema(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties


class Field200(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias="200")


class Get(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter]
    responses: Responses
    tags: Sequence[str]


class FieldActivities(BaseModel):
    get: Get
    parameters: Sequence


class Items1(BaseModel):
    type: str


class Results1(BaseModel):
    type: str
    items: Items1


class Properties1(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results1


class Schema1(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties1


class Field2001(BaseModel):
    description: str
    schema_: Schema1 = Field(..., alias="schema")


class Responses1(BaseModel):
    field_200: Field2001 = Field(..., alias="200")


class Get1(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter]
    responses: Responses1
    tags: Sequence[str]


class FieldEntities(BaseModel):
    get: Get1
    parameters: Sequence


class Schema2(BaseModel):
    type: str


class Field2002(BaseModel):
    description: str
    schema_: Schema2 = Field(..., alias="schema")


class Responses2(BaseModel):
    field_200: Field2002 = Field(..., alias="200")


class Get2(BaseModel):
    operationId: str
    description: str
    parameters: Sequence
    responses: Responses2
    tags: Sequence[str]


class Parameter2(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldEntitiesEntityName(BaseModel):
    get: Get2
    parameters: Sequence[Parameter2]


class Parameter3(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Items2(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Results2(BaseModel):
    type: str
    items: Items2


class Properties2(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results2


class Schema3(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties2


class Field2003(BaseModel):
    description: str
    schema_: Schema3 = Field(..., alias="schema")


class Responses3(BaseModel):
    field_200: Field2003 = Field(..., alias="200")


class Get3(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter3]
    responses: Responses3
    tags: Sequence[str]


class FieldGenes(BaseModel):
    get: Get3
    parameters: Sequence


class Schema4(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field2004(BaseModel):
    description: str
    schema_: Schema4 = Field(..., alias="schema")


class Responses4(BaseModel):
    field_200: Field2004 = Field(..., alias="200")


class Get4(BaseModel):
    operationId: str
    description: str
    parameters: Sequence
    responses: Responses4
    tags: Sequence[str]


class Parameter4(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldGenesEntityName(BaseModel):
    get: Get4
    parameters: Sequence[Parameter4]


class Parameter5(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results3(BaseModel):
    type: str
    items: Items2


class Properties3(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results3


class Schema5(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties3


class Field2005(BaseModel):
    description: str
    schema_: Schema5 = Field(..., alias="schema")


class Responses5(BaseModel):
    field_200: Field2005 = Field(..., alias="200")


class Get5(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter5]
    responses: Responses5
    tags: Sequence[str]


class FieldPanels(BaseModel):
    get: Get5
    parameters: Sequence


class Results4(BaseModel):
    type: str
    items: Items2


class Properties4(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results4


class Schema6(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties4


class Field2006(BaseModel):
    description: str
    schema_: Schema6 = Field(..., alias="schema")


class Responses6(BaseModel):
    field_200: Field2006 = Field(..., alias="200")


class Get6(BaseModel):
    operationId: str
    summary: str
    description: str
    parameters: Sequence[Parameter5]
    responses: Responses6
    tags: Sequence[str]


class FieldPanelsSignedoff(BaseModel):
    get: Get6
    parameters: Sequence


class Schema7(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field2007(BaseModel):
    description: str
    schema_: Schema7 = Field(..., alias="schema")


class Responses7(BaseModel):
    field_200: Field2007 = Field(..., alias="200")


class Get7(BaseModel):
    operationId: str
    summary: str
    description: str
    parameters: Sequence
    responses: Responses7
    tags: Sequence[str]


class Parameter7(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsSignedoffId(BaseModel):
    get: Get7
    parameters: Sequence[Parameter7]


class Field2008(BaseModel):
    description: str
    schema_: Schema7 = Field(..., alias="schema")


class Responses8(BaseModel):
    field_200: Field2008 = Field(..., alias="200")


class Get8(BaseModel):
    operationId: str
    summary: str
    description: str
    parameters: Sequence
    responses: Responses8
    tags: Sequence[str]


class FieldPanelsId(BaseModel):
    get: Get8
    parameters: Sequence[Parameter7]


class Field2009(BaseModel):
    description: str
    schema_: Schema7 = Field(..., alias="schema")


class Responses9(BaseModel):
    field_200: Field2009 = Field(..., alias="200")


class Get9(BaseModel):
    operationId: str
    description: str
    parameters: Sequence
    responses: Responses9
    tags: Sequence[str]


class FieldPanelsIdActivities(BaseModel):
    get: Get9
    parameters: Sequence[Parameter7]


class Field20010(BaseModel):
    description: str
    schema_: Schema7 = Field(..., alias="schema")


class Responses10(BaseModel):
    field_200: Field20010 = Field(..., alias="200")


class Get10(BaseModel):
    operationId: str
    description: str
    parameters: Sequence
    responses: Responses10
    tags: Sequence[str]


class FieldPanelsIdVersions(BaseModel):
    get: Get10
    parameters: Sequence[Parameter7]


class Parameter11(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results5(BaseModel):
    type: str
    items: Items2


class Properties5(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results5


class Schema11(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties5


class Field20011(BaseModel):
    description: str
    schema_: Schema11 = Field(..., alias="schema")


class Responses11(BaseModel):
    field_200: Field20011 = Field(..., alias="200")


class Get11(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter11]
    responses: Responses11
    tags: Sequence[str]


class Parameter12(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsPanelPkGenes(BaseModel):
    get: Get11
    parameters: Sequence[Parameter12]


class Parameter13(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results6(BaseModel):
    type: str
    items: Items2


class Properties6(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results6


class Schema12(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties6


class Field20012(BaseModel):
    description: str
    schema_: Schema12 = Field(..., alias="schema")


class Responses12(BaseModel):
    field_200: Field20012 = Field(..., alias="200")


class Get12(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter13]
    responses: Responses12
    tags: Sequence[str]


class Parameter14(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsPanelPkGenesGeneEntityNameEvaluations(BaseModel):
    get: Get12
    parameters: Sequence[Parameter14]


class Parameter15(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results7(BaseModel):
    type: str
    items: Items2


class Properties7(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results7


class Schema13(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties7


class Field20013(BaseModel):
    description: str
    schema_: Schema13 = Field(..., alias="schema")


class Responses13(BaseModel):
    field_200: Field20013 = Field(..., alias="200")


class Get13(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter15]
    responses: Responses13
    tags: Sequence[str]


class Parameter16(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsPanelPkRegions(BaseModel):
    get: Get13
    parameters: Sequence[Parameter16]


class Parameter17(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results8(BaseModel):
    type: str
    items: Items2


class Properties8(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results8


class Schema14(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties8


class Field20014(BaseModel):
    description: str
    schema_: Schema14 = Field(..., alias="schema")


class Responses14(BaseModel):
    field_200: Field20014 = Field(..., alias="200")


class Get14(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter17]
    responses: Responses14
    tags: Sequence[str]


class Parameter18(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsPanelPkRegionsRegionEntityNameEvaluations(BaseModel):
    get: Get14
    parameters: Sequence[Parameter18]


class Parameter19(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results9(BaseModel):
    type: str
    items: Items2


class Properties9(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results9


class Schema15(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties9


class Field20015(BaseModel):
    description: str
    schema_: Schema15 = Field(..., alias="schema")


class Responses15(BaseModel):
    field_200: Field20015 = Field(..., alias="200")


class Get15(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter19]
    responses: Responses15
    tags: Sequence[str]


class Parameter20(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsPanelPkStrs(BaseModel):
    get: Get15
    parameters: Sequence[Parameter20]


class Parameter21(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results10(BaseModel):
    type: str
    items: Items2


class Properties10(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results10


class Schema16(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties10


class Field20016(BaseModel):
    description: str
    schema_: Schema16 = Field(..., alias="schema")


class Responses16(BaseModel):
    field_200: Field20016 = Field(..., alias="200")


class Get16(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter21]
    responses: Responses16
    tags: Sequence[str]


class Parameter22(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldPanelsPanelPkStrsStrEntityNameEvaluations(BaseModel):
    get: Get16
    parameters: Sequence[Parameter22]


class Parameter23(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results11(BaseModel):
    type: str
    items: Items2


class Properties11(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results11


class Schema17(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties11


class Field20017(BaseModel):
    description: str
    schema_: Schema17 = Field(..., alias="schema")


class Responses17(BaseModel):
    field_200: Field20017 = Field(..., alias="200")


class Get17(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter23]
    responses: Responses17
    tags: Sequence[str]


class FieldRegions(BaseModel):
    get: Get17
    parameters: Sequence


class Schema18(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field20018(BaseModel):
    description: str
    schema_: Schema18 = Field(..., alias="schema")


class Responses18(BaseModel):
    field_200: Field20018 = Field(..., alias="200")


class Get18(BaseModel):
    operationId: str
    description: str
    parameters: Sequence
    responses: Responses18
    tags: Sequence[str]


class Parameter24(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldRegionsEntityName(BaseModel):
    get: Get18
    parameters: Sequence[Parameter24]


class Parameter25(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str


class Results12(BaseModel):
    type: str
    items: Items2


class Properties12(BaseModel):
    count: Count
    next: Next
    previous: Previous
    results: Results12


class Schema19(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties12


class Field20019(BaseModel):
    description: str
    schema_: Schema19 = Field(..., alias="schema")


class Responses19(BaseModel):
    field_200: Field20019 = Field(..., alias="200")


class Get19(BaseModel):
    operationId: str
    description: str
    parameters: Sequence[Parameter25]
    responses: Responses19
    tags: Sequence[str]


class FieldStrs(BaseModel):
    get: Get19
    parameters: Sequence


class Schema20(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field20020(BaseModel):
    description: str
    schema_: Schema20 = Field(..., alias="schema")


class Responses20(BaseModel):
    field_200: Field20020 = Field(..., alias="200")


class Get20(BaseModel):
    operationId: str
    description: str
    parameters: Sequence
    responses: Responses20
    tags: Sequence[str]


class Parameter26(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    required: bool
    type: str


class FieldStrsEntityName(BaseModel):
    get: Get20
    parameters: Sequence[Parameter26]


class Paths(BaseModel):
    field_activities_: FieldActivities = Field(..., alias="/activities/")
    field_entities_: FieldEntities = Field(..., alias="/entities/")
    field_entities__entity_name__: FieldEntitiesEntityName = Field(
        ..., alias="/entities/{entity_name}/"
    )
    field_genes_: FieldGenes = Field(..., alias="/genes/")
    field_genes__entity_name__: FieldGenesEntityName = Field(..., alias="/genes/{entity_name}/")
    field_panels_: FieldPanels = Field(..., alias="/panels/")
    field_panels_signedoff_: FieldPanelsSignedoff = Field(..., alias="/panels/signedoff/")
    field_panels_signedoff__id__: FieldPanelsSignedoffId = Field(
        ..., alias="/panels/signedoff/{id}/"
    )
    field_panels__id__: FieldPanelsId = Field(..., alias="/panels/{id}/")
    field_panels__id__activities_: FieldPanelsIdActivities = Field(
        ..., alias="/panels/{id}/activities/"
    )
    field_panels__id__versions_: FieldPanelsIdVersions = Field(..., alias="/panels/{id}/versions/")
    field_panels__panel_pk__genes_: FieldPanelsPanelPkGenes = Field(
        ..., alias="/panels/{panel_pk}/genes/"
    )
    field_panels__panel_pk__genes__gene_entity_name__evaluations_: FieldPanelsPanelPkGenesGeneEntityNameEvaluations = Field(
        ..., alias="/panels/{panel_pk}/genes/{gene_entity_name}/evaluations/"
    )
    field_panels__panel_pk__regions_: FieldPanelsPanelPkRegions = Field(
        ..., alias="/panels/{panel_pk}/regions/"
    )
    field_panels__panel_pk__regions__region_entity_name__evaluations_: FieldPanelsPanelPkRegionsRegionEntityNameEvaluations = Field(
        ..., alias="/panels/{panel_pk}/regions/{region_entity_name}/evaluations/"
    )
    field_panels__panel_pk__strs_: FieldPanelsPanelPkStrs = Field(
        ..., alias="/panels/{panel_pk}/strs/"
    )
    field_panels__panel_pk__strs__str_entity_name__evaluations_: FieldPanelsPanelPkStrsStrEntityNameEvaluations = Field(
        ..., alias="/panels/{panel_pk}/strs/{str_entity_name}/evaluations/"
    )
    field_regions_: FieldRegions = Field(..., alias="/regions/")
    field_regions__entity_name__: FieldRegionsEntityName = Field(
        ..., alias="/regions/{entity_name}/"
    )
    field_strs_: FieldStrs = Field(..., alias="/strs/")
    field_strs__entity_name__: FieldStrsEntityName = Field(..., alias="/strs/{entity_name}/")


class Created(BaseModel):
    title: str
    type: str
    format: str
    readOnly: bool


class PanelName(BaseModel):
    title: str
    type: str
    readOnly: bool


class PanelId(BaseModel):
    title: str
    type: str
    readOnly: bool


class PanelVersion(BaseModel):
    title: str
    type: str
    readOnly: bool


class UserName(BaseModel):
    title: str
    type: str
    readOnly: bool


class ItemType(BaseModel):
    title: str
    type: str
    maxLength: int
    minLength: int
    x_nullable: bool = Field(..., alias="x-nullable")


class Text(BaseModel):
    title: str
    type: str
    minLength: int


class EntityName(BaseModel):
    title: str
    type: str
    maxLength: int
    minLength: int
    x_nullable: bool = Field(..., alias="x-nullable")


class EntityType(BaseModel):
    title: str
    type: str
    maxLength: int
    minLength: int
    x_nullable: bool = Field(..., alias="x-nullable")


class Properties13(BaseModel):
    created: Created
    panel_name: PanelName
    panel_id: PanelId
    panel_version: PanelVersion
    user_name: UserName
    item_type: ItemType
    text: Text
    entity_name: EntityName
    entity_type: EntityType


class Activity(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties13


class Name(BaseModel):
    title: str
    type: str
    maxLength: int
    minLength: int


class Slug(BaseModel):
    title: str
    type: str
    format: str
    pattern: str
    readOnly: bool
    minLength: int


class Description(BaseModel):
    title: str
    type: str
    minLength: int


class Properties14(BaseModel):
    name: Name
    slug: Slug
    description: Description


class PanelType(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties14


class Id(BaseModel):
    title: str
    type: str


class HashId(BaseModel):
    title: str
    type: str
    readOnly: bool


class Name1(BaseModel):
    title: str
    type: str
    readOnly: bool


class DiseaseGroup(BaseModel):
    title: str
    type: str
    readOnly: bool


class DiseaseSubGroup(BaseModel):
    title: str
    type: str
    readOnly: bool


class Status(BaseModel):
    title: str
    type: str
    readOnly: bool


class Version(BaseModel):
    title: str
    type: str
    readOnly: bool
    minLength: int


class VersionCreated(BaseModel):
    title: str
    type: str
    format: str
    readOnly: bool


class Items13(BaseModel):
    type: str
    x_nullable: bool = Field(..., alias="x-nullable")


class RelevantDisorders(BaseModel):
    type: str
    items: Items13


class Stats(BaseModel):
    title: str
    description: str
    type: str
    readOnly: bool


class Items14(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Types(BaseModel):
    type: str
    items: Items14
    readOnly: bool


class Properties15(BaseModel):
    id: Id
    hash_id: HashId
    name: Name1
    disease_group: DiseaseGroup
    disease_sub_group: DiseaseSubGroup
    status: Status
    version: Version
    version_created: VersionCreated
    relevant_disorders: RelevantDisorders
    stats: Stats
    types: Types


class Panel(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties15
    x_nullable: bool = Field(..., alias="x-nullable")


class GeneData(BaseModel):
    title: str
    type: str
    readOnly: bool


class EntityType1(BaseModel):
    title: str
    type: str
    minLength: int


class EntityName1(BaseModel):
    title: str
    type: str
    minLength: int


class ConfidenceLevel(BaseModel):
    title: str
    type: str
    minLength: int


class Penetrance(BaseModel):
    title: str
    type: str
    enum: Sequence[str]
    x_nullable: bool = Field(..., alias="x-nullable")


class ModeOfPathogenicity(BaseModel):
    title: str
    type: str
    enum: Sequence[str]
    x_nullable: bool = Field(..., alias="x-nullable")


class Items15(BaseModel):
    type: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Publications(BaseModel):
    type: str
    items: Items15


class Evidence(BaseModel):
    type: str
    items: Items15


class Phenotypes(BaseModel):
    type: str
    items: Items15


class ModeOfInheritance(BaseModel):
    title: str
    type: str
    minLength: int


class Items18(BaseModel):
    type: str


class Tags(BaseModel):
    type: str
    items: Items18
    readOnly: bool
    uniqueItems: bool


class Panel1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Items19(BaseModel):
    type: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Transcript(BaseModel):
    type: str
    items: Items19


class Properties16(BaseModel):
    gene_data: GeneData
    entity_type: EntityType1
    entity_name: EntityName1
    confidence_level: ConfidenceLevel
    penetrance: Penetrance
    mode_of_pathogenicity: ModeOfPathogenicity
    publications: Publications
    evidence: Evidence
    phenotypes: Phenotypes
    mode_of_inheritance: ModeOfInheritance
    tags: Tags
    panel: Panel1
    transcript: Transcript


class Gene(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties16


class Data(BaseModel):
    title: str
    type: str


class SignedOffDate(BaseModel):
    title: str
    type: str
    format: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Properties17(BaseModel):
    data: Data
    signed_off_date: SignedOffDate


class HistoricalSnapshot(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties17


class Rating(BaseModel):
    title: str
    type: str
    enum: Sequence[str]


class Items20(BaseModel):
    title: str
    type: str
    minLength: int


class Publications1(BaseModel):
    type: str
    items: Items20
    x_nullable: bool = Field(..., alias="x-nullable")


class Phenotypes1(BaseModel):
    type: str
    items: Items20
    x_nullable: bool = Field(..., alias="x-nullable")


class Moi(BaseModel):
    title: str
    type: str
    enum: Sequence[str]
    x_nullable: bool = Field(..., alias="x-nullable")


class CurrentDiagnostic(BaseModel):
    title: str
    type: str


class ClinicallyRelevant(BaseModel):
    title: str
    description: str
    type: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Properties18(BaseModel):
    created: Created
    rating: Rating
    mode_of_pathogenicity: ModeOfPathogenicity
    publications: Publications1
    phenotypes: Phenotypes1
    moi: Moi
    current_diagnostic: CurrentDiagnostic
    clinically_relevant: ClinicallyRelevant


class Evaluation(BaseModel):
    type: str
    properties: Properties18


class VerboseName(BaseModel):
    title: str
    description: str
    type: str
    maxLength: int
    x_nullable: bool = Field(..., alias="x-nullable")


class HaploinsufficiencyScore(BaseModel):
    title: str
    type: str
    enum: Sequence[str]
    x_nullable: bool = Field(..., alias="x-nullable")


class TriplosensitivityScore(BaseModel):
    title: str
    type: str
    enum: Sequence[str]
    x_nullable: bool = Field(..., alias="x-nullable")


class RequiredOverlapPercentage(BaseModel):
    title: str
    description: str
    type: str
    maximum: int
    minimum: int


class TypeOfVariants(BaseModel):
    title: str
    type: str
    enum: Sequence[str]


class Items22(BaseModel):
    type: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Publications2(BaseModel):
    type: str
    items: Items22


class Evidence1(BaseModel):
    type: str
    items: Items22


class Phenotypes2(BaseModel):
    type: str
    items: Items22


class Chromosome(BaseModel):
    title: str
    type: str
    enum: Sequence[str]


class Items25(BaseModel):
    type: str


class Grch37Coordinates(BaseModel):
    type: str
    items: Items25
    maxItems: int
    minItems: int


class Grch38Coordinates(BaseModel):
    type: str
    items: Items25
    maxItems: int
    minItems: int


class Tags1(BaseModel):
    type: str
    items: Items25
    readOnly: bool
    uniqueItems: bool


class Properties19(BaseModel):
    gene_data: GeneData
    entity_type: EntityType1
    entity_name: EntityName1
    verbose_name: VerboseName
    confidence_level: ConfidenceLevel
    penetrance: Penetrance
    mode_of_pathogenicity: ModeOfPathogenicity
    haploinsufficiency_score: HaploinsufficiencyScore
    triplosensitivity_score: TriplosensitivityScore
    required_overlap_percentage: RequiredOverlapPercentage
    type_of_variants: TypeOfVariants
    publications: Publications2
    evidence: Evidence1
    phenotypes: Phenotypes2
    mode_of_inheritance: ModeOfInheritance
    chromosome: Chromosome
    grch37_coordinates: Grch37Coordinates
    grch38_coordinates: Grch38Coordinates
    tags: Tags1
    panel: Panel1


class Region(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties19


class Items28(BaseModel):
    type: str
    x_nullable: bool = Field(..., alias="x-nullable")


class Publications3(BaseModel):
    type: str
    items: Items28


class Evidence2(BaseModel):
    type: str
    items: Items28


class Phenotypes3(BaseModel):
    type: str
    items: Items28


class RepeatedSequence(BaseModel):
    title: str
    type: str
    maxLength: int
    minLength: int


class Items31(BaseModel):
    type: str


class Grch37Coordinates1(BaseModel):
    type: str
    items: Items31
    maxItems: int
    minItems: int


class Grch38Coordinates1(BaseModel):
    type: str
    items: Items31
    maxItems: int
    minItems: int


class NormalRepeats(BaseModel):
    title: str
    description: str
    type: str
    maximum: int
    minimum: int


class PathogenicRepeats(BaseModel):
    title: str
    description: str
    type: str
    maximum: int
    minimum: int


class Tags2(BaseModel):
    type: str
    items: Items31
    readOnly: bool
    uniqueItems: bool


class Properties20(BaseModel):
    gene_data: GeneData
    entity_type: EntityType1
    entity_name: EntityName1
    confidence_level: ConfidenceLevel
    penetrance: Penetrance
    publications: Publications3
    evidence: Evidence2
    phenotypes: Phenotypes3
    mode_of_inheritance: ModeOfInheritance
    repeated_sequence: RepeatedSequence
    chromosome: Chromosome
    grch37_coordinates: Grch37Coordinates1
    grch38_coordinates: Grch38Coordinates1
    normal_repeats: NormalRepeats
    pathogenic_repeats: PathogenicRepeats
    tags: Tags2
    panel: Panel1


class STR(BaseModel):
    required: Sequence[str]
    type: str
    properties: Properties20


class Definitions(BaseModel):
    Activity: Activity
    PanelType: PanelType
    Panel: Panel
    Gene: Gene
    HistoricalSnapshot: HistoricalSnapshot
    Evaluation: Evaluation
    Region: Region
    STR: STR


class Model(BaseModel):
    swagger: str
    info: Info
    host: str
    schemes: Sequence[str]
    basePath: str
    consumes: Sequence[str]
    produces: Sequence[str]
    securityDefinitions: SecurityDefinitions
    security: Sequence[SecurityItem]
    paths: Paths
    definitions: Definitions
